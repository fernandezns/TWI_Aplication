
TWI_Aplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000afa  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  00000b9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100b  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d3  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043c  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__ctors_end>
   4:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
   8:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
   c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  10:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  14:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  18:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  1c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  20:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  24:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  28:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  2c:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_11>
  30:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  34:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  38:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  3c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  40:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  44:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  48:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  4c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  50:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  54:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  58:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  5c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  60:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_24>
  64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  68:	1e 02       	muls	r17, r30
  6a:	28 02       	muls	r18, r24
  6c:	32 02       	muls	r19, r18
  6e:	3c 02       	muls	r19, r28
  70:	46 02       	muls	r20, r22
  72:	50 02       	muls	r21, r16
  74:	5a 02       	muls	r21, r26
  76:	64 02       	muls	r22, r20
  78:	6e 02       	muls	r22, r30
  7a:	78 02       	muls	r23, r24
  7c:	82 02       	muls	r24, r18
  7e:	8c 02       	muls	r24, r28
  80:	96 02       	muls	r25, r22
  82:	a0 02       	muls	r26, r16
  84:	aa 02       	muls	r26, r26
  86:	b4 02       	muls	r27, r20
  88:	be 02       	muls	r27, r30
  8a:	c8 02       	muls	r28, r24
  8c:	d2 02       	muls	r29, r18
  8e:	dc 02       	muls	r29, r28
  90:	e6 02       	muls	r30, r22
  92:	f0 02       	muls	r31, r16
  94:	fa 02       	muls	r31, r26
  96:	04 03       	mulsu	r16, r20
  98:	0e 03       	fmul	r16, r22
  9a:	18 03       	fmul	r17, r16
  9c:	22 03       	mulsu	r18, r18
  9e:	2c 03       	fmul	r18, r20
  a0:	7e 04       	cpc	r7, r14
  a2:	8b 04       	cpc	r8, r11
  a4:	98 04       	cpc	r9, r8
  a6:	a5 04       	cpc	r10, r5
  a8:	b1 04       	cpc	r11, r1
  aa:	bd 04       	cpc	r11, r13
  ac:	c9 04       	cpc	r12, r9
  ae:	d5 04       	cpc	r13, r5

000000b0 <ROMCHAR>:
	...
  b8:	7e 81 95 b1 b1 95 81 7e 7e ff eb cf cf eb ff 7e     ~......~~......~
  c8:	0e 1f 3f 7e 3f 1f 0e 00 08 1c 3e 7f 3e 1c 08 00     ..?~?.....>.>...
  d8:	18 ba ff ff ff ba 18 00 10 b8 fc ff fc b8 10 00     ................
  e8:	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff     ...<<...........
  f8:	00 3c 66 42 42 66 3c 00 ff c3 99 bd bd 99 c3 ff     .<fBBf<.........
 108:	70 f8 88 88 fd 7f 07 0f 00 4e 5f f1 f1 5f 4e 00     p........N_.._N.
 118:	c0 e0 ff 7f 05 05 07 07 c0 ff 7f 05 05 65 7f 3f     .............e.?
 128:	99 5a 3c e7 e7 3c 5a 99 7f 3e 3e 1c 1c 08 08 00     .Z<..<Z..>>.....
 138:	08 08 1c 1c 3e 3e 7f 00 00 24 66 ff ff 66 24 00     ....>>...$f..f$.
 148:	00 5f 5f 00 00 5f 5f 00 06 0f 09 7f 7f 01 7f 7f     .__..__.........
 158:	40 da bf a5 fd 5b 02 00 00 70 70 70 70 70 70 00     @....[...pppppp.
 168:	80 94 b6 ff ff b6 94 80 00 04 06 7f 7f 06 04 00     ................
 178:	00 10 30 7f 7f 30 10 00 08 08 08 2a 3e 1c 08 00     ..0..0.....*>...
 188:	08 1c 3e 2a 08 08 08 00 00 00 c0 c0 c0 fe 00 00     ..>*............
 198:	08 1c 3e 08 08 3e 1c 08 30 38 3c 3e 3e 3c 38 30     ..>..>..08<>><80
 1a8:	06 0e 1e 3e 3e 1e 0e 06 00 00 00 00 00 00 00 00     ...>>...........
 1b8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
 1c8:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
 1d8:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
 1e8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
 1f8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
 208:	08 08 3e 3e 08 08 00 00 00 80 e0 60 00 00 00 00     ..>>.......`....
 218:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
 228:	60 30 18 0c 06 03 01 00 3e 7f 71 59 4d 7f 3e 00     `0......>.qYM.>.
 238:	00 02 7f 7f 00 00 00 00 62 73 59 49 4f 46 00 00     ........bsYIOF..
 248:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
 258:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
 268:	01 01 71 79 0f 07 00 00 36 7f 49 49 7f 36 00 00     ..qy....6.II.6..
 278:	06 4f 49 69 3f 1e 00 00 00 00 66 66 00 00 00 00     .OIi?.....ff....
 288:	00 80 e6 66 00 00 00 00 08 1c 36 63 41 00 00 00     ...f......6cA...
 298:	24 24 24 24 24 24 00 00 00 41 63 36 1c 08 00 00     $$$$$$...Ac6....
 2a8:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
 2b8:	00 7c 7e 13 13 7e 7c 00 00 7f 7f 49 49 7f 36 00     .|~..~|....II.6.
 2c8:	1c 3e 63 41 41 63 22 00 00 7f 7f 41 63 3e 1c 00     .>cAAc"....Ac>..
 2d8:	00 7f 7f 49 49 41 41 00 00 7f 7f 09 09 01 01 00     ...IIAA.........
 2e8:	1c 3e 63 41 51 73 72 00 00 7f 7f 08 08 7f 7f 00     .>cAQsr.........
 2f8:	00 00 00 7f 7f 00 00 00 00 30 70 40 40 7f 3f 00     .........0p@@.?.
 308:	00 7f 7f 08 1c 77 63 00 00 7f 7f 40 40 40 40 00     .....wc....@@@@.
 318:	7f 7f 0e 1c 0e 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
 328:	00 3e 7f 41 41 7f 3e 00 00 7f 7f 09 09 0f 06 00     .>.AA.>.........
 338:	00 1e 3f 21 71 7f 5e 00 00 7f 7f 09 19 7f 66 00     ..?!q.^.......f.
 348:	00 26 6f 4d 59 73 32 00 00 01 01 7f 7f 01 01 00     .&oMYs2.........
 358:	00 3f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00     .?.@@.....?``?..
 368:	7f 7f 30 18 30 7f 7f 00 00 63 77 1c 1c 77 63 00     ..0.0....cw..wc.
 378:	00 07 0f 78 78 0f 07 00 41 61 71 59 4d 47 43 00     ...xx...AaqYMGC.

00000388 <__ctors_end>:
 388:	11 24       	eor	r1, r1
 38a:	1f be       	out	0x3f, r1	; 63
 38c:	cf ef       	ldi	r28, 0xFF	; 255
 38e:	d8 e0       	ldi	r29, 0x08	; 8
 390:	de bf       	out	0x3e, r29	; 62
 392:	cd bf       	out	0x3d, r28	; 61

00000394 <__do_copy_data>:
 394:	11 e0       	ldi	r17, 0x01	; 1
 396:	a0 e0       	ldi	r26, 0x00	; 0
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	ea ef       	ldi	r30, 0xFA	; 250
 39c:	fa e0       	ldi	r31, 0x0A	; 10
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <__do_copy_data+0x10>
 3a0:	05 90       	lpm	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	ac 30       	cpi	r26, 0x0C	; 12
 3a6:	b1 07       	cpc	r27, r17
 3a8:	d9 f7       	brne	.-10     	; 0x3a0 <__do_copy_data+0xc>

000003aa <__do_clear_bss>:
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	ac e0       	ldi	r26, 0x0C	; 12
 3ae:	b1 e0       	ldi	r27, 0x01	; 1
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <.do_clear_bss_start>

000003b2 <.do_clear_bss_loop>:
 3b2:	1d 92       	st	X+, r1

000003b4 <.do_clear_bss_start>:
 3b4:	a6 31       	cpi	r26, 0x16	; 22
 3b6:	b2 07       	cpc	r27, r18
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <.do_clear_bss_loop>
 3ba:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
 3be:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_exit>

000003c2 <__bad_interrupt>:
 3c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c6 <twiInterrupt>:
static uint8_t twi_Status=0;
static uint8_t comando=0;


void twiInterrupt(){
	twi_Status=TWSR&0xF8;
 3c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3ca:	88 7f       	andi	r24, 0xF8	; 248
 3cc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
 3d0:	08 95       	ret

000003d2 <disply1306InitTWI>:
}



uint8_t disply1306InitTWI(uint8_t micro){
	if	(micro==ATMEGA328P){
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	69 f4       	brne	.+26     	; 0x3f0 <disply1306InitTWI+0x1e>
		TWBR=((16000000UL/SCL_CLOCK)-16)/2;			//Factor de division del bitrate generator = 32
 3d6:	88 e4       	ldi	r24, 0x48	; 72
 3d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
		TWSR&=~((1<<TWPS0)|(1<<TWPS1));						//TWI Prescaler = 1
 3dc:	e9 eb       	ldi	r30, 0xB9	; 185
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	8c 7f       	andi	r24, 0xFC	; 252
 3e4:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWIE);
 3e6:	85 ea       	ldi	r24, 0xA5	; 165
 3e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
	}	
	return 0;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
}
 3f2:	08 95       	ret

000003f4 <disply1306SlaveAddrsTWI>:

uint8_t disply1306SlaveAddrsTWI(uint8_t micro){
	if(micro==ATMEGA328P){
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	41 f4       	brne	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		TWDR=SLAVE_WRITE;
 3f8:	88 e7       	ldi	r24, 0x78	; 120
 3fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWIE);
 3fe:	85 e8       	ldi	r24, 0x85	; 133
 400:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	08 95       	ret
	}
	return 0;
 408:	80 e0       	ldi	r24, 0x00	; 0
}
 40a:	08 95       	ret

0000040c <disply1306Data>:

uint8_t disply1306Data(uint8_t micro,uint8_t data){
	if(micro==ATMEGA328P){
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	39 f4       	brne	.+14     	; 0x41e <disply1306Data+0x12>
		TWDR=data;
 410:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWIE);
 414:	85 e8       	ldi	r24, 0x85	; 133
 416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret
	}
	return 0;
 41e:	80 e0       	ldi	r24, 0x00	; 0
}
 420:	08 95       	ret

00000422 <disply1306Settings>:
			break;
	}
	return 0;
}
void disply1306Settings(){		
	switch(comando){
 422:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <comando>
 426:	8e 2f       	mov	r24, r30
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	8c 31       	cpi	r24, 0x1C	; 28
 42c:	91 05       	cpc	r25, r1
 42e:	08 f0       	brcs	.+2      	; 0x432 <disply1306Settings+0x10>
 430:	16 c1       	rjmp	.+556    	; 0x65e <disply1306Settings+0x23c>
 432:	fc 01       	movw	r30, r24
 434:	ec 5c       	subi	r30, 0xCC	; 204
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	0c 94 75 05 	jmp	0xaea	; 0xaea <__tablejump2__>
		case 0:
			disply1306Data(ATMEGA328P,CTRL_BYTE_COMANDO);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 444:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 44e:	08 95       	ret
		case 1:
			disply1306Data(ATMEGA328P,DISPLAY_OFF);
 450:	6e ea       	ldi	r22, 0xAE	; 174
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 458:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 462:	08 95       	ret
		case 2:
			disply1306Data(ATMEGA328P,CLK_DIVR_OSC_FREQ);
 464:	65 ed       	ldi	r22, 0xD5	; 213
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 46c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 476:	08 95       	ret
		case 3:
			disply1306Data(ATMEGA328P,0x80);
 478:	60 e8       	ldi	r22, 0x80	; 128
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 480:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 48a:	08 95       	ret
		case 4:
			disply1306Data(ATMEGA328P,MPLX_NUMBER);
 48c:	68 ea       	ldi	r22, 0xA8	; 168
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 494:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 498:	8f 5f       	subi	r24, 0xFF	; 255
 49a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 49e:	08 95       	ret
		case 5:
			disply1306Data(ATMEGA328P,0x3F);
 4a0:	6f e3       	ldi	r22, 0x3F	; 63
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 4a8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 4ac:	8f 5f       	subi	r24, 0xFF	; 255
 4ae:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 4b2:	08 95       	ret
		case 6:
			disply1306Data(ATMEGA328P,DISPLAY_OFFSET);
 4b4:	63 ed       	ldi	r22, 0xD3	; 211
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 4bc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 4c0:	8f 5f       	subi	r24, 0xFF	; 255
 4c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 4c6:	08 95       	ret
		case 7:
			disply1306Data(ATMEGA328P,0);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 4d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 4da:	08 95       	ret
		case 8:
			disply1306Data(ATMEGA328P,RAM_STARTLINE_REG);
 4dc:	60 e4       	ldi	r22, 0x40	; 64
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 4e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 4ee:	08 95       	ret
		case 9:
			disply1306Data(ATMEGA328P,CHARGE_PUMP);
 4f0:	6d e8       	ldi	r22, 0x8D	; 141
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 4f8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 4fc:	8f 5f       	subi	r24, 0xFF	; 255
 4fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 502:	08 95       	ret
		case 10:
			disply1306Data(ATMEGA328P,0x14);
 504:	64 e1       	ldi	r22, 0x14	; 20
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 50c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 516:	08 95       	ret
		case 11:
			disply1306Data(ATMEGA328P,SEGMENT_REMAP);
 518:	61 ea       	ldi	r22, 0xA1	; 161
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 520:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 52a:	08 95       	ret
		case 12:
			disply1306Data(ATMEGA328P,COM_OUT_SCAN_DIR);
 52c:	68 ec       	ldi	r22, 0xC8	; 200
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 534:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 53e:	08 95       	ret
		case 13:
			disply1306Data(ATMEGA328P,COM_PINS_CONFIG);
 540:	6a ed       	ldi	r22, 0xDA	; 218
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 548:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 54c:	8f 5f       	subi	r24, 0xFF	; 255
 54e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 552:	08 95       	ret
		case 14:
			disply1306Data(ATMEGA328P,0x12);
 554:	62 e1       	ldi	r22, 0x12	; 18
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 55c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 566:	08 95       	ret
		case 15:
			disply1306Data(ATMEGA328P,CONTRAST);
 568:	61 e8       	ldi	r22, 0x81	; 129
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 570:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 57a:	08 95       	ret
		case 16:
			disply1306Data(ATMEGA328P,0x9F);
 57c:	6f e9       	ldi	r22, 0x9F	; 159
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 584:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 58e:	08 95       	ret
		case 17:
			disply1306Data(ATMEGA328P,MEMORY_ADRESS_MODE);
 590:	60 e2       	ldi	r22, 0x20	; 32
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 598:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 5a2:	08 95       	ret
		case 18:
			disply1306Data(ATMEGA328P,0x02);//Memory Addressing Mode (Horizontal=0 , Vertical=1 , Page=2)
 5a4:	62 e0       	ldi	r22, 0x02	; 2
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 5ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 5b6:	08 95       	ret
		case 19:	
			disply1306Data(ATMEGA328P,DISABLE_SCROLL);
 5b8:	6e e2       	ldi	r22, 0x2E	; 46
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 5c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;	
 5ca:	08 95       	ret
		case 20:
			disply1306Data(ATMEGA328P,PRE_CHARGE_PERIOD);
 5cc:	69 ed       	ldi	r22, 0xD9	; 217
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 5d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 5d8:	8f 5f       	subi	r24, 0xFF	; 255
 5da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 5de:	08 95       	ret
		case 21:
			disply1306Data(ATMEGA328P,0x22);
 5e0:	62 e2       	ldi	r22, 0x22	; 34
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 5e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 5f2:	08 95       	ret
		case 22:
			disply1306Data(ATMEGA328P,VCOMH_DESELECT_LEVEL);
 5f4:	6b ed       	ldi	r22, 0xDB	; 219
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 5fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 606:	08 95       	ret
		case 23:
			disply1306Data(ATMEGA328P,0x40);
 608:	60 e4       	ldi	r22, 0x40	; 64
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 610:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 614:	8f 5f       	subi	r24, 0xFF	; 255
 616:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 61a:	08 95       	ret
		case 24:
			disply1306Data(ATMEGA328P,RESUME_TO_RAM);
 61c:	64 ea       	ldi	r22, 0xA4	; 164
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 624:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 628:	8f 5f       	subi	r24, 0xFF	; 255
 62a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 62e:	08 95       	ret
		case 25:
			disply1306Data(ATMEGA328P,DISPLAY_INVERSE_MODE);
 630:	67 ea       	ldi	r22, 0xA7	; 167
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 638:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 63c:	8f 5f       	subi	r24, 0xFF	; 255
 63e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 642:	08 95       	ret
		case 26:
			disply1306Data(ATMEGA328P,DISPLAY_ON);
 644:	6f ea       	ldi	r22, 0xAF	; 175
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
			comando++;
 64c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 650:	8f 5f       	subi	r24, 0xFF	; 255
 652:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
			break;
 656:	08 95       	ret
		case 27:
			comando=LAST_COMAND_RECEIVED;
 658:	80 ef       	ldi	r24, 0xF0	; 240
 65a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
 65e:	08 95       	ret

00000660 <disply1306StopTWI>:
	}
	return 0;
}

uint8_t disply1306StopTWI(uint8_t micro){
	if(micro==ATMEGA328P){
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	29 f4       	brne	.+10     	; 0x66e <disply1306StopTWI+0xe>
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 664:	84 e9       	ldi	r24, 0x94	; 148
 666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return 1;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
	}
	return 0;
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret

00000672 <disply1306Write>:

void twiInterrupt(){
	twi_Status=TWSR&0xF8;
}

uint8_t disply1306Write(uint8_t *string, uint8_t page,uint8_t cantLetras){
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	8c 01       	movw	r16, r24
 67e:	f6 2e       	mov	r15, r22
 680:	d4 2f       	mov	r29, r20
	static uint8_t write=0,k=0,j=0;
	uint8_t caracter=0;
	
	switch(twi_Status){
 682:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <twi_Status>
 686:	88 30       	cpi	r24, 0x08	; 8
 688:	79 f0       	breq	.+30     	; 0x6a8 <disply1306Write+0x36>
 68a:	18 f4       	brcc	.+6      	; 0x692 <disply1306Write+0x20>
 68c:	88 23       	and	r24, r24
 68e:	31 f0       	breq	.+12     	; 0x69c <disply1306Write+0x2a>
 690:	16 c0       	rjmp	.+44     	; 0x6be <disply1306Write+0x4c>
 692:	88 31       	cpi	r24, 0x18	; 24
 694:	79 f0       	breq	.+30     	; 0x6b4 <disply1306Write+0x42>
 696:	88 32       	cpi	r24, 0x28	; 40
 698:	69 f0       	breq	.+26     	; 0x6b4 <disply1306Write+0x42>
 69a:	11 c0       	rjmp	.+34     	; 0x6be <disply1306Write+0x4c>
		case 0:
			twi_Status=1;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306InitTWI(ATMEGA328P);
 6a2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <disply1306InitTWI>
			break;
 6a6:	0b c0       	rjmp	.+22     	; 0x6be <disply1306Write+0x4c>
		case TWI_STARTED:
			twi_Status=1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306SlaveAddrsTWI(ATMEGA328P);
 6ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <disply1306SlaveAddrsTWI>
			break;
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <disply1306Write+0x4c>
		case SLA_W_SENT: case DATA_RECEIVED: 
			twi_Status=1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			write=1;
 6ba:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <write.1789>
			break;
	}

	if(write){
 6be:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <write.1789>
 6c2:	cc 23       	and	r28, r28
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <disply1306Write+0x56>
 6c6:	61 c0       	rjmp	.+194    	; 0x78a <disply1306Write+0x118>
		write=0;
 6c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <write.1789>
		switch(comando){
 6cc:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <comando>
 6d0:	c1 30       	cpi	r28, 0x01	; 1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <disply1306Write+0x82>
 6d4:	28 f0       	brcs	.+10     	; 0x6e0 <disply1306Write+0x6e>
 6d6:	c2 30       	cpi	r28, 0x02	; 2
 6d8:	c1 f0       	breq	.+48     	; 0x70a <disply1306Write+0x98>
 6da:	c3 30       	cpi	r28, 0x03	; 3
 6dc:	09 f1       	breq	.+66     	; 0x720 <disply1306Write+0xae>
 6de:	52 c0       	rjmp	.+164    	; 0x784 <disply1306Write+0x112>
			case 0:
				disply1306Data(ATMEGA328P,0x80);
 6e0:	60 e8       	ldi	r22, 0x80	; 128
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
				comando++;
 6e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
				break;	
 6f2:	4b c0       	rjmp	.+150    	; 0x78a <disply1306Write+0x118>
			case 1:
				disply1306Data(ATMEGA328P,page);
 6f4:	6f 2d       	mov	r22, r15
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
				comando++;
 6fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 700:	8f 5f       	subi	r24, 0xFF	; 255
 702:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
					return 1;
				}
				break;
		}
	}
	return 0;
 706:	c0 e0       	ldi	r28, 0x00	; 0
				comando++;
				break;	
			case 1:
				disply1306Data(ATMEGA328P,page);
				comando++;
				break;
 708:	40 c0       	rjmp	.+128    	; 0x78a <disply1306Write+0x118>
			case 2:
				disply1306Data(ATMEGA328P,0x40);
 70a:	60 e4       	ldi	r22, 0x40	; 64
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
				comando++;
 712:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 716:	8f 5f       	subi	r24, 0xFF	; 255
 718:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
					return 1;
				}
				break;
		}
	}
	return 0;
 71c:	c0 e0       	ldi	r28, 0x00	; 0
				comando++;
				break;
			case 2:
				disply1306Data(ATMEGA328P,0x40);
				comando++;
				break;
 71e:	35 c0       	rjmp	.+106    	; 0x78a <disply1306Write+0x118>
			case 3:
				if(k<cantLetras){
 720:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <k.1790>
 724:	8d 17       	cp	r24, r29
 726:	28 f5       	brcc	.+74     	; 0x772 <disply1306Write+0x100>
					caracter=pgm_read_byte_near(&ROMCHAR[*(string+k)*8+j]);
 728:	f8 01       	movw	r30, r16
 72a:	e8 0f       	add	r30, r24
 72c:	f1 1d       	adc	r31, r1
 72e:	e0 81       	ld	r30, Z
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	ee 0f       	add	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j.1791>
 742:	e8 0f       	add	r30, r24
 744:	f1 1d       	adc	r31, r1
 746:	e0 55       	subi	r30, 0x50	; 80
 748:	ff 4f       	sbci	r31, 0xFF	; 255
 74a:	64 91       	lpm	r22, Z
					disply1306Data(ATMEGA328P,caracter);
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
					j++;
 752:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j.1791>
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j.1791>
					if(j==8){
 75c:	88 30       	cpi	r24, 0x08	; 8
 75e:	a1 f4       	brne	.+40     	; 0x788 <disply1306Write+0x116>
						k++;
 760:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <k.1790>
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <k.1790>
						j=0;
 76a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <j.1791>
					return 1;
				}
				break;
		}
	}
	return 0;
 76e:	c0 e0       	ldi	r28, 0x00	; 0
 770:	0c c0       	rjmp	.+24     	; 0x78a <disply1306Write+0x118>
						k++;
						j=0;
					}
				}
				else{
					comando=0;
 772:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <comando>
					disply1306StopTWI(ATMEGA328P);
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	0e 94 30 03 	call	0x660	; 0x660 <disply1306StopTWI>
					twi_Status=0;
 77c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <twi_Status>
					return 1;
 780:	c1 e0       	ldi	r28, 0x01	; 1
 782:	03 c0       	rjmp	.+6      	; 0x78a <disply1306Write+0x118>
				}
				break;
		}
	}
	return 0;
 784:	c0 e0       	ldi	r28, 0x00	; 0
 786:	01 c0       	rjmp	.+2      	; 0x78a <disply1306Write+0x118>
 788:	c0 e0       	ldi	r28, 0x00	; 0
}
 78a:	8c 2f       	mov	r24, r28
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	08 95       	ret

00000798 <disply1306DefaultInit>:

uint8_t disply1306DefaultInit(){
 798:	cf 93       	push	r28
	switch(twi_Status){
 79a:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <twi_Status>
 79e:	c8 30       	cpi	r28, 0x08	; 8
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <disply1306DefaultInit+0x28>
 7a2:	18 f4       	brcc	.+6      	; 0x7aa <disply1306DefaultInit+0x12>
 7a4:	cc 23       	and	r28, r28
 7a6:	31 f0       	breq	.+12     	; 0x7b4 <disply1306DefaultInit+0x1c>
 7a8:	24 c0       	rjmp	.+72     	; 0x7f2 <disply1306DefaultInit+0x5a>
 7aa:	c8 31       	cpi	r28, 0x18	; 24
 7ac:	81 f0       	breq	.+32     	; 0x7ce <disply1306DefaultInit+0x36>
 7ae:	c8 32       	cpi	r28, 0x28	; 40
 7b0:	71 f0       	breq	.+28     	; 0x7ce <disply1306DefaultInit+0x36>
 7b2:	1f c0       	rjmp	.+62     	; 0x7f2 <disply1306DefaultInit+0x5a>
		case 0:
			twi_Status=1;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306InitTWI(ATMEGA328P);
 7ba:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <disply1306InitTWI>
			break;
 7be:	1c c0       	rjmp	.+56     	; 0x7f8 <disply1306DefaultInit+0x60>
		case TWI_STARTED:
			twi_Status=1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306SlaveAddrsTWI(ATMEGA328P);
 7c6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <disply1306SlaveAddrsTWI>
				twi_Status=0;
				return 1;
			}
			break;
	}
	return 0;
 7ca:	c0 e0       	ldi	r28, 0x00	; 0
			disply1306InitTWI(ATMEGA328P);
			break;
		case TWI_STARTED:
			twi_Status=1;
			disply1306SlaveAddrsTWI(ATMEGA328P);
			break;
 7cc:	15 c0       	rjmp	.+42     	; 0x7f8 <disply1306DefaultInit+0x60>
		case SLA_W_SENT: case DATA_RECEIVED: 
			twi_Status=1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306Settings();
 7d4:	0e 94 11 02 	call	0x422	; 0x422 <disply1306Settings>
			if(comando==LAST_COMAND_RECEIVED){
 7d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 7dc:	80 3f       	cpi	r24, 0xF0	; 240
 7de:	59 f4       	brne	.+22     	; 0x7f6 <disply1306DefaultInit+0x5e>
				disply1306StopTWI(ATMEGA328P);
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 30 03 	call	0x660	; 0x660 <disply1306StopTWI>
				comando=0;
 7e6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <comando>
				twi_Status=0;
 7ea:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <twi_Status>
				return 1;
 7ee:	c1 e0       	ldi	r28, 0x01	; 1
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <disply1306DefaultInit+0x60>
			}
			break;
	}
	return 0;
 7f2:	c0 e0       	ldi	r28, 0x00	; 0
 7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <disply1306DefaultInit+0x60>
 7f6:	c0 e0       	ldi	r28, 0x00	; 0
}
 7f8:	8c 2f       	mov	r24, r28
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <cleanPage>:
	}
}



uint8_t cleanPage(uint8_t page){
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	d8 2f       	mov	r29, r24
	static uint8_t clean=0,i=0;
	switch(twi_Status){
 804:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <twi_Status>
 808:	88 30       	cpi	r24, 0x08	; 8
 80a:	79 f0       	breq	.+30     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80c:	18 f4       	brcc	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80e:	88 23       	and	r24, r24
 810:	31 f0       	breq	.+12     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 812:	16 c0       	rjmp	.+44     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 814:	88 31       	cpi	r24, 0x18	; 24
 816:	79 f0       	breq	.+30     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 818:	88 32       	cpi	r24, 0x28	; 40
 81a:	69 f0       	breq	.+26     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 81c:	11 c0       	rjmp	.+34     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		case 0:
			twi_Status=1;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306InitTWI(ATMEGA328P);
 824:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <disply1306InitTWI>
			break;
 828:	0b c0       	rjmp	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		case TWI_STARTED:
			twi_Status=1;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			disply1306SlaveAddrsTWI(ATMEGA328P);
 830:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <disply1306SlaveAddrsTWI>
			break;
 834:	05 c0       	rjmp	.+10     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		case SLA_W_SENT: case DATA_RECEIVED: 
			twi_Status=1;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <twi_Status>
			clean=1;
 83c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <clean.1847>
			break;
	}
	if(clean){
 840:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <clean.1847>
 844:	cc 23       	and	r28, r28
 846:	09 f4       	brne	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	47 c0       	rjmp	.+142    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
		clean=0;
 84a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <clean.1847>
		switch(comando){
 84e:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <comando>
 852:	c1 30       	cpi	r28, 0x01	; 1
 854:	81 f0       	breq	.+32     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 856:	28 f0       	brcs	.+10     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 858:	c2 30       	cpi	r28, 0x02	; 2
 85a:	c1 f0       	breq	.+48     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 85c:	c3 30       	cpi	r28, 0x03	; 3
 85e:	09 f1       	breq	.+66     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 860:	3a c0       	rjmp	.+116    	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
			case 0:
				disply1306Data(ATMEGA328P,0x80);
 862:	60 e8       	ldi	r22, 0x80	; 128
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
				comando++;
 86a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 86e:	8f 5f       	subi	r24, 0xFF	; 255
 870:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
				break;	
 874:	31 c0       	rjmp	.+98     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
			case 1:
				disply1306Data(ATMEGA328P,page);
 876:	6d 2f       	mov	r22, r29
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
				comando++;
 87e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
					return 1;
				}
				break;
		}
	}
	return 0;
 888:	c0 e0       	ldi	r28, 0x00	; 0
				comando++;
				break;	
			case 1:
				disply1306Data(ATMEGA328P,page);
				comando++;
				break;
 88a:	26 c0       	rjmp	.+76     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
			case 2:
				disply1306Data(ATMEGA328P,0x40);
 88c:	60 e4       	ldi	r22, 0x40	; 64
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
				comando++;
 894:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <comando>
 898:	8f 5f       	subi	r24, 0xFF	; 255
 89a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <comando>
					return 1;
				}
				break;
		}
	}
	return 0;
 89e:	c0 e0       	ldi	r28, 0x00	; 0
				comando++;
				break;
			case 2:
				disply1306Data(ATMEGA328P,0x40);
				comando++;
				break;
 8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
			case 3:
				if(i<128){
 8a2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <i.1848>
 8a6:	88 23       	and	r24, r24
 8a8:	5c f0       	brlt	.+22     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
					disply1306Data(ATMEGA328P,0x00);
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 06 02 	call	0x40c	; 0x40c <disply1306Data>
					i++;
 8b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <i.1848>
 8b6:	8f 5f       	subi	r24, 0xFF	; 255
 8b8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <i.1848>
					return 1;
				}
				break;
		}
	}
	return 0;
 8bc:	c0 e0       	ldi	r28, 0x00	; 0
					disply1306StopTWI(ATMEGA328P);
					comando=0;
					twi_Status=0;
					return 1;
				}
				break;
 8be:	0c c0       	rjmp	.+24     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
				if(i<128){
					disply1306Data(ATMEGA328P,0x00);
					i++;
				}
				else{
					i=0;
 8c0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <i.1848>
					disply1306StopTWI(ATMEGA328P);
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	0e 94 30 03 	call	0x660	; 0x660 <disply1306StopTWI>
					comando=0;
 8ca:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <comando>
					twi_Status=0;
 8ce:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <twi_Status>
					return 1;
 8d2:	c1 e0       	ldi	r28, 0x01	; 1
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
				}
				break;
		}
	}
	return 0;
 8d6:	c0 e0       	ldi	r28, 0x00	; 0
}
 8d8:	8c 2f       	mov	r24, r28
 8da:	df 91       	pop	r29
 8dc:	cf 91       	pop	r28
 8de:	08 95       	ret

000008e0 <cleanAllDisplay>:

uint8_t cleanAllDisplay(){
 8e0:	cf 93       	push	r28
	static uint8_t page=0;
	switch(page){
 8e2:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <__data_end>
 8e6:	8c 2f       	mov	r24, r28
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	88 30       	cpi	r24, 0x08	; 8
 8ec:	91 05       	cpc	r25, r1
 8ee:	08 f0       	brcs	.+2      	; 0x8f2 <cleanAllDisplay+0x12>
 8f0:	65 c0       	rjmp	.+202    	; 0x9bc <__stack+0xbd>
 8f2:	fc 01       	movw	r30, r24
 8f4:	e0 5b       	subi	r30, 0xB0	; 176
 8f6:	ff 4f       	sbci	r31, 0xFF	; 255
 8f8:	0c 94 75 05 	jmp	0xaea	; 0xaea <__tablejump2__>
		case 0:
			if(cleanPage(0xB0))
 8fc:	80 eb       	ldi	r24, 0xB0	; 176
 8fe:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 902:	88 23       	and	r24, r24
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	5b c0       	rjmp	.+182    	; 0x9be <__stack+0xbf>
				page++;
 908:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 90c:	8f 5f       	subi	r24, 0xFF	; 255
 90e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 912:	8c 2f       	mov	r24, r28
 914:	54 c0       	rjmp	.+168    	; 0x9be <__stack+0xbf>
		case 0:
			if(cleanPage(0xB0))
				page++;
			break;
		case 1:
			if(cleanPage(0xB1))
 916:	81 eb       	ldi	r24, 0xB1	; 177
 918:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 91c:	88 23       	and	r24, r24
 91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
 920:	4e c0       	rjmp	.+156    	; 0x9be <__stack+0xbf>
				page++;
 922:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 926:	8f 5f       	subi	r24, 0xFF	; 255
 928:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	47 c0       	rjmp	.+142    	; 0x9be <__stack+0xbf>
		case 1:
			if(cleanPage(0xB1))
				page++;
			break;
		case 2:
			if(cleanPage(0xB2))
 930:	82 eb       	ldi	r24, 0xB2	; 178
 932:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 936:	88 23       	and	r24, r24
 938:	09 f4       	brne	.+2      	; 0x93c <__stack+0x3d>
 93a:	41 c0       	rjmp	.+130    	; 0x9be <__stack+0xbf>
				page++;
 93c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 940:	8f 5f       	subi	r24, 0xFF	; 255
 942:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	3a c0       	rjmp	.+116    	; 0x9be <__stack+0xbf>
		case 2:
			if(cleanPage(0xB2))
				page++;
			break;
		case 3:
			if(cleanPage(0xB3))
 94a:	83 eb       	ldi	r24, 0xB3	; 179
 94c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 950:	88 23       	and	r24, r24
 952:	a9 f1       	breq	.+106    	; 0x9be <__stack+0xbf>
				page++;
 954:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 958:	8f 5f       	subi	r24, 0xFF	; 255
 95a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	2e c0       	rjmp	.+92     	; 0x9be <__stack+0xbf>
		case 3:
			if(cleanPage(0xB3))
				page++;
			break;
		case 4:
			if(cleanPage(0xB4))
 962:	84 eb       	ldi	r24, 0xB4	; 180
 964:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 968:	88 23       	and	r24, r24
 96a:	49 f1       	breq	.+82     	; 0x9be <__stack+0xbf>
				page++;
 96c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 970:	8f 5f       	subi	r24, 0xFF	; 255
 972:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	22 c0       	rjmp	.+68     	; 0x9be <__stack+0xbf>
		case 4:
			if(cleanPage(0xB4))
				page++;
			break;
		case 5:
			if(cleanPage(0xB5))
 97a:	85 eb       	ldi	r24, 0xB5	; 181
 97c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 980:	88 23       	and	r24, r24
 982:	e9 f0       	breq	.+58     	; 0x9be <__stack+0xbf>
				page++;
 984:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 988:	8f 5f       	subi	r24, 0xFF	; 255
 98a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	16 c0       	rjmp	.+44     	; 0x9be <__stack+0xbf>
		case 5:
			if(cleanPage(0xB5))
				page++;
			break;	
		case 6:
			if(cleanPage(0xB6))
 992:	86 eb       	ldi	r24, 0xB6	; 182
 994:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 998:	88 23       	and	r24, r24
 99a:	89 f0       	breq	.+34     	; 0x9be <__stack+0xbf>
				page++;
 99c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 9a0:	8f 5f       	subi	r24, 0xFF	; 255
 9a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				page=0;
				return 1;
			}
			break;
	}
	return 0;
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	0a c0       	rjmp	.+20     	; 0x9be <__stack+0xbf>
		case 6:
			if(cleanPage(0xB6))
				page++;
			break;
		case 7:
			if(cleanPage(0xB7)){
 9aa:	87 eb       	ldi	r24, 0xB7	; 183
 9ac:	0e 94 ff 03 	call	0x7fe	; 0x7fe <cleanPage>
 9b0:	88 23       	and	r24, r24
 9b2:	29 f0       	breq	.+10     	; 0x9be <__stack+0xbf>
				page=0;
 9b4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
				return 1;
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <__stack+0xbf>
			}
			break;
	}
	return 0;
 9bc:	80 e0       	ldi	r24, 0x00	; 0
}
 9be:	cf 91       	pop	r28
 9c0:	08 95       	ret

000009c2 <__vector_24>:
//Variables Globales
volatile uint8_t flagTwi=0;
volatile uint8_t delay=10;
uint8_t tarea=0;

ISR(TWI_vect){ 
 9c2:	1f 92       	push	r1
 9c4:	0f 92       	push	r0
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	0f 92       	push	r0
 9ca:	11 24       	eor	r1, r1
 9cc:	2f 93       	push	r18
 9ce:	3f 93       	push	r19
 9d0:	4f 93       	push	r20
 9d2:	5f 93       	push	r21
 9d4:	6f 93       	push	r22
 9d6:	7f 93       	push	r23
 9d8:	8f 93       	push	r24
 9da:	9f 93       	push	r25
 9dc:	af 93       	push	r26
 9de:	bf 93       	push	r27
 9e0:	ef 93       	push	r30
 9e2:	ff 93       	push	r31
	flagTwi=1;
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <flagTwi>
	twiInterrupt();
 9ea:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <twiInterrupt>
}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <initPorts>:

void initPorts(){
	//Configuro PIN del LED como salida (PB5 Arduino UNO)
	DDRB = (1 << DDB5);
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	84 b9       	out	0x04, r24	; 4
 a14:	08 95       	ret

00000a16 <initTimer>:
	//PORTD &=~ (1<<PORTD2);
	//
}

void initTimer(){
	TCCR1A=0x00;// modo CTC(clear timer on compare) del timer 1
 a16:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0x0C;// modo CTC(clear timer on compare) del timer 1 y preescalador = 256
 a1a:	8c e0       	ldi	r24, 0x0C	; 12
 a1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1=TIFR1;//borro lo q tenga OCF1A (Output Compare A Match Flag) (para bajar la bandera hay q escribirle un 1 en ese bit)
 a20:	86 b3       	in	r24, 0x16	; 22
 a22:	86 bb       	out	0x16, r24	; 22
	TIMSK1=(1<<OCIE1A); //HABILITO INTERRUPCION (OUTPUT COMPARE "A" MATCH INTERRUPT ENABLE)
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	//PARA ESCRIBIR EN UN REGISTRO DE 16 BIT PRIMERO DEBO ESCRIBIR EL BYTE ALTO Y DESPUES EL BYTE BAJO
	OCR1AH=0x02;
 a2a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL=0x71;
 a2e:	81 e7       	ldi	r24, 0x71	; 113
 a30:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 a34:	08 95       	ret

00000a36 <__vector_11>:
	//LE ASIGNE AL REGISTRO OCR1A DE 16 BIT EL VALOR 625
}

ISR(TIMER1_COMPA_vect){
 a36:	1f 92       	push	r1
 a38:	0f 92       	push	r0
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
 a40:	8f 93       	push	r24
	delay--;
 a42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a46:	81 50       	subi	r24, 0x01	; 1
 a48:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(!delay) 
 a4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a50:	81 11       	cpse	r24, r1
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <__vector_11+0x24>
		delay=10;
 a54:	8a e0       	ldi	r24, 0x0A	; 10
 a56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 a5a:	8f 91       	pop	r24
 a5c:	0f 90       	pop	r0
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	0f 90       	pop	r0
 a62:	1f 90       	pop	r1
 a64:	18 95       	reti

00000a66 <main>:

int main(void)
{
	cli();
 a66:	f8 94       	cli
	initPorts();
 a68:	0e 94 08 05 	call	0xa10	; 0xa10 <initPorts>
	initTimer();
 a6c:	0e 94 0b 05 	call	0xa16	; 0xa16 <initTimer>
	sei();
 a70:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a72:	2f ef       	ldi	r18, 0xFF	; 255
 a74:	83 ed       	ldi	r24, 0xD3	; 211
 a76:	90 e3       	ldi	r25, 0x30	; 48
 a78:	21 50       	subi	r18, 0x01	; 1
 a7a:	80 40       	sbci	r24, 0x00	; 0
 a7c:	90 40       	sbci	r25, 0x00	; 0
 a7e:	e1 f7       	brne	.-8      	; 0xa78 <main+0x12>
 a80:	00 c0       	rjmp	.+0      	; 0xa82 <main+0x1c>
 a82:	00 00       	nop
	_delay_ms(1000);
	flagTwi=1;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <flagTwi>
    while (1) 
    {
		if(flagTwi){
 a8a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <flagTwi>
 a8e:	88 23       	and	r24, r24
 a90:	e1 f3       	breq	.-8      	; 0xa8a <main+0x24>
			flagTwi=0;
 a92:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <flagTwi>
			switch(tarea){
 a96:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tarea>
 a9a:	81 30       	cpi	r24, 0x01	; 1
 a9c:	71 f0       	breq	.+28     	; 0xaba <main+0x54>
 a9e:	18 f0       	brcs	.+6      	; 0xaa6 <main+0x40>
 aa0:	82 30       	cpi	r24, 0x02	; 2
 aa2:	a9 f0       	breq	.+42     	; 0xace <main+0x68>
 aa4:	f2 cf       	rjmp	.-28     	; 0xa8a <main+0x24>
				case 0:
					if(disply1306DefaultInit())
 aa6:	0e 94 cc 03 	call	0x798	; 0x798 <disply1306DefaultInit>
 aaa:	88 23       	and	r24, r24
 aac:	71 f3       	breq	.-36     	; 0xa8a <main+0x24>
						tarea++;
 aae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tarea>
 ab2:	8f 5f       	subi	r24, 0xFF	; 255
 ab4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tarea>
 ab8:	e8 cf       	rjmp	.-48     	; 0xa8a <main+0x24>
					break;
				case 1:
					if(cleanAllDisplay())
 aba:	0e 94 70 04 	call	0x8e0	; 0x8e0 <cleanAllDisplay>
 abe:	88 23       	and	r24, r24
 ac0:	21 f3       	breq	.-56     	; 0xa8a <main+0x24>
						tarea++;
 ac2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tarea>
 ac6:	8f 5f       	subi	r24, 0xFF	; 255
 ac8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tarea>
 acc:	de cf       	rjmp	.-68     	; 0xa8a <main+0x24>
					break;
				case 2:
					if(disply1306Write(&texto[0],0xB0,10))
 ace:	4a e0       	ldi	r20, 0x0A	; 10
 ad0:	60 eb       	ldi	r22, 0xB0	; 176
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	91 e0       	ldi	r25, 0x01	; 1
 ad6:	0e 94 39 03 	call	0x672	; 0x672 <disply1306Write>
 ada:	88 23       	and	r24, r24
 adc:	b1 f2       	breq	.-84     	; 0xa8a <main+0x24>
						tarea++;
 ade:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <tarea>
 ae2:	8f 5f       	subi	r24, 0xFF	; 255
 ae4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <tarea>
 ae8:	d0 cf       	rjmp	.-96     	; 0xa8a <main+0x24>

00000aea <__tablejump2__>:
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	05 90       	lpm	r0, Z+
 af0:	f4 91       	lpm	r31, Z
 af2:	e0 2d       	mov	r30, r0
 af4:	09 94       	ijmp

00000af6 <_exit>:
 af6:	f8 94       	cli

00000af8 <__stop_program>:
 af8:	ff cf       	rjmp	.-2      	; 0xaf8 <__stop_program>
