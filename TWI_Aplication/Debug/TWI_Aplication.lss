
TWI_Aplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b4  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054b  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d8  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  88:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initPorts>:
//Variables globales
volatile uint8_t twiStatus=0x00;

void initPorts(){
	//Configuro PIN del LED como salida (PB5 Arduino UNO)
	DDRB = (1 << DDB5);
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PORTB5);
	//
	//Configuro PIN 2 digital como entrada digital
	DDRD &= ~(1<<DDD2);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	8a b9       	out	0x0a, r24	; 10
	PORTD &=~ (1<<PORTD2);
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	8b b9       	out	0x0b, r24	; 11
  a0:	08 95       	ret

000000a2 <startTWI>:
    }
}

void startTWI(){
	//configuro SCLfreq = 100kHz
	TWBR=((F_CPU/SCL_CLOCK)-16)/2;		//Factor de division del bitrate generator = 32
  a2:	88 e4       	ldi	r24, 0x48	; 72
  a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR&=~(1<<TWPS0);//TWI Prescaler = 1
  a8:	e9 eb       	ldi	r30, 0xB9	; 185
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	80 83       	st	Z, r24
	TWSR&=~(1<<TWPS1);//TWI Prescaler = 1
  b2:	80 81       	ld	r24, Z
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	80 83       	st	Z, r24
	
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while(!(TWCR & (1<<TWINT)));//Espero a la bandera TWINT FLAG que indica q se genero el Start
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <startTWI+0x1c>
	twiStatus=(TWSR & TWI_STARTED);
  c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ca:	88 70       	andi	r24, 0x08	; 8
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTB |= (1<<PORTB5);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <sendSlaveAdress>:
	
}

void sendSlaveAdress(){
	TWDR=0x78;
  d8:	88 e7       	ldi	r24, 0x78	; 120
  da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG q indica q se transmitio la SLAVE_WRITE
  e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e8:	88 23       	and	r24, r24
  ea:	e4 f7       	brge	.-8      	; 0xe4 <sendSlaveAdress+0xc>
	twiStatus=(TWSR & SLA_W_SENT);
  ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f0:	88 71       	andi	r24, 0x18	; 24
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f6:	08 95       	ret

000000f8 <dataToTWI>:
	//control byte
	//TWDR=0b00000000;
	//TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
	//while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG 

	TWDR=0xAE;//display OFF
  f8:	8e ea       	ldi	r24, 0xAE	; 174
  fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <dataToTWI+0xc>
	
	TWDR=0xD5;// Display clock divide ratio & Oscillator frequency
 10c:	85 ed       	ldi	r24, 0xD5	; 213
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <dataToTWI+0x20>
	//
	PORTB |= (1<<PORTB5);
 120:	85 b1       	in	r24, 0x05	; 5
 122:	80 62       	ori	r24, 0x20	; 32
 124:	85 b9       	out	0x05, r24	; 5
	//
	TWDR=0x80;//D5 default settings
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 132:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 136:	88 23       	and	r24, r24
 138:	e4 f7       	brge	.-8      	; 0x132 <dataToTWI+0x3a>
	
	TWDR=0xA8;//Set Multiplex number(activated rows): ( range 16 ~ 64 )
 13a:	88 ea       	ldi	r24, 0xA8	; 168
 13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 146:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14a:	88 23       	and	r24, r24
 14c:	e4 f7       	brge	.-8      	; 0x146 <dataToTWI+0x4e>
	
	TWDR=0x3F;//Set Multiplex number(activated rows): ( N+1 )
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 154:	84 e8       	ldi	r24, 0x84	; 132
 156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 15a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15e:	88 23       	and	r24, r24
 160:	e4 f7       	brge	.-8      	; 0x15a <dataToTWI+0x62>
	
	TWDR=0xD3;//Set display offset
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 16e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 172:	88 23       	and	r24, r24
 174:	e4 f7       	brge	.-8      	; 0x16e <dataToTWI+0x76>
	
	TWDR=0x00;//Set display offset ( range 0 ~ 63 )
 176:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <dataToTWI+0x88>
	
	TWDR=0x40;//Set display RAM start line register
 188:	80 e4       	ldi	r24, 0x40	; 64
 18a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 18e:	84 e8       	ldi	r24, 0x84	; 132
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 194:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 198:	88 23       	and	r24, r24
 19a:	e4 f7       	brge	.-8      	; 0x194 <dataToTWI+0x9c>
	
	TWDR=0x8D; //Charge pump: On=0x14, Off=0x10
 19c:	8d e8       	ldi	r24, 0x8D	; 141
 19e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 1a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <dataToTWI+0xb0>
	
	TWDR=0x14; //Charge pump: (Vcc supplied internally 0x14, Vcc supplied externally 0x10)
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 1b6:	84 e8       	ldi	r24, 0x84	; 132
 1b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 1bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c0:	88 23       	and	r24, r24
 1c2:	e4 f7       	brge	.-8      	; 0x1bc <dataToTWI+0xc4>
	
	TWDR=0xA1; //SEG (columns) normal(0xA0) mode, (inverse=0xA1)
 1c4:	81 ea       	ldi	r24, 0xA1	; 161
 1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	88 23       	and	r24, r24
 1d6:	e4 f7       	brge	.-8      	; 0x1d0 <dataToTWI+0xd8>
	
	TWDR=0xC8; //COM (rows) normal mode(0xC0), (inverse=0xC8)
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 1de:	84 e8       	ldi	r24, 0x84	; 132
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 1e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e8:	88 23       	and	r24, r24
 1ea:	e4 f7       	brge	.-8      	; 0x1e4 <dataToTWI+0xec>
	
	TWDR=0xDA;//Set COM Pins Hardware config
 1ec:	8a ed       	ldi	r24, 0xDA	; 218
 1ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 1f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fc:	88 23       	and	r24, r24
 1fe:	e4 f7       	brge	.-8      	; 0x1f8 <dataToTWI+0x100>
	
	TWDR=0x12;//Set COM Pins Hardware config: Sequencial COM pin config & Disable COM Left/Right remap
 200:	82 e1       	ldi	r24, 0x12	; 18
 202:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 20c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	88 23       	and	r24, r24
 212:	e4 f7       	brge	.-8      	; 0x20c <dataToTWI+0x114>
	
	TWDR=0x81;//Set Contrast Control
 214:	81 e8       	ldi	r24, 0x81	; 129
 216:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 21a:	84 e8       	ldi	r24, 0x84	; 132
 21c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 220:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	88 23       	and	r24, r24
 226:	e4 f7       	brge	.-8      	; 0x220 <dataToTWI+0x128>
	
	TWDR=0x9F;//Set Contrast Control
 228:	8f e9       	ldi	r24, 0x9F	; 159
 22a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 22e:	84 e8       	ldi	r24, 0x84	; 132
 230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 234:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 238:	88 23       	and	r24, r24
 23a:	e4 f7       	brge	.-8      	; 0x234 <dataToTWI+0x13c>
	//
	//TWDR=0x2E; //Disable Scroll
	//TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
	//while(!(TWSR & (1<<TWINT)));//Espero la TWINT FLAG
	
	TWDR=0xD9; //Pre-charge period 
 23c:	89 ed       	ldi	r24, 0xD9	; 217
 23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24c:	88 23       	and	r24, r24
 24e:	e4 f7       	brge	.-8      	; 0x248 <dataToTWI+0x150>
	
	TWDR=0x22; //Pre-charge period 
 250:	82 e2       	ldi	r24, 0x22	; 34
 252:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 256:	84 e8       	ldi	r24, 0x84	; 132
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 25c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 260:	88 23       	and	r24, r24
 262:	e4 f7       	brge	.-8      	; 0x25c <dataToTWI+0x164>
	
	
	TWDR=0xDB; //
 264:	8b ed       	ldi	r24, 0xDB	; 219
 266:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 26a:	84 e8       	ldi	r24, 0x84	; 132
 26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 270:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 274:	88 23       	and	r24, r24
 276:	e4 f7       	brge	.-8      	; 0x270 <dataToTWI+0x178>
	
	TWDR=0x40; //
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 27e:	84 e8       	ldi	r24, 0x84	; 132
 280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 284:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 288:	88 23       	and	r24, r24
 28a:	e4 f7       	brge	.-8      	; 0x284 <dataToTWI+0x18c>
	
	TWDR=0xA5;// entire display ON
 28c:	85 ea       	ldi	r24, 0xA5	; 165
 28e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 292:	84 e8       	ldi	r24, 0x84	; 132
 294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 298:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29c:	88 23       	and	r24, r24
 29e:	e4 f7       	brge	.-8      	; 0x298 <dataToTWI+0x1a0>
	
	TWDR=0xA7; //Display Normal mode, (inverse=0xA7)
 2a0:	87 ea       	ldi	r24, 0xA7	; 167
 2a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 2a6:	84 e8       	ldi	r24, 0x84	; 132
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 2ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b0:	88 23       	and	r24, r24
 2b2:	e4 f7       	brge	.-8      	; 0x2ac <dataToTWI+0x1b4>
	
	TWDR=0xAF; //Display ON
 2b4:	8f ea       	ldi	r24, 0xAF	; 175
 2b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=((1<<TWINT)|(1<<TWEN));//Bajo la TWINT FLAG
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//Espero la TWINT FLAG
 2c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c4:	88 23       	and	r24, r24
 2c6:	e4 f7       	brge	.-8      	; 0x2c0 <dataToTWI+0x1c8>
	
	
	//PORTB |= (1<<PORTB5);
	
	twiStatus=(TWSR & DATA_SENT);
 2c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2cc:	88 72       	andi	r24, 0x28	; 40
 2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2d2:	08 95       	ret

000002d4 <stopTWI>:
}

void stopTWI(){
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 2d4:	84 e9       	ldi	r24, 0x94	; 148
 2d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2da:	08 95       	ret

000002dc <main>:



int main(void)
{
	cli();
 2dc:	f8 94       	cli
	initPorts();
 2de:	0e 94 48 00 	call	0x90	; 0x90 <initPorts>
	sei();
 2e2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0xe>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x18>
 2f4:	00 00       	nop
	//while(!(PIND &(1<<PORTD2)));
	_delay_ms(1000);
    while (1) 
    {
			switch(twiStatus){
 2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2fa:	88 30       	cpi	r24, 0x08	; 8
 2fc:	61 f0       	breq	.+24     	; 0x316 <main+0x3a>
 2fe:	18 f4       	brcc	.+6      	; 0x306 <main+0x2a>
 300:	88 23       	and	r24, r24
 302:	31 f0       	breq	.+12     	; 0x310 <main+0x34>
 304:	f8 cf       	rjmp	.-16     	; 0x2f6 <main+0x1a>
 306:	88 31       	cpi	r24, 0x18	; 24
 308:	49 f0       	breq	.+18     	; 0x31c <main+0x40>
 30a:	88 32       	cpi	r24, 0x28	; 40
 30c:	51 f0       	breq	.+20     	; 0x322 <main+0x46>
 30e:	f3 cf       	rjmp	.-26     	; 0x2f6 <main+0x1a>
				case 0x00:
					startTWI();
 310:	0e 94 51 00 	call	0xa2	; 0xa2 <startTWI>
					//PORTB |= (1<<PORTB5);
					break;
 314:	f0 cf       	rjmp	.-32     	; 0x2f6 <main+0x1a>
				
				case TWI_STARTED:
					sendSlaveAdress();
 316:	0e 94 6c 00 	call	0xd8	; 0xd8 <sendSlaveAdress>
					//PORTB |= (1<<PORTB5);
					break;
 31a:	ed cf       	rjmp	.-38     	; 0x2f6 <main+0x1a>
				
				case SLA_W_SENT:
					dataToTWI();
 31c:	0e 94 7c 00 	call	0xf8	; 0xf8 <dataToTWI>
					//PORTB |= (1<<PORTB5);	
					break;
 320:	ea cf       	rjmp	.-44     	; 0x2f6 <main+0x1a>
				
				case DATA_SENT:
					stopTWI();
 322:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <stopTWI>
					twiStatus=0x01;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					//PORTB |= (1<<PORTB5);
					break;
 32c:	e4 cf       	rjmp	.-56     	; 0x2f6 <main+0x1a>

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
